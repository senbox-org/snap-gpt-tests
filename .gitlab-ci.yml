image: docker-hosted.snap-ci.ovh/snap/snap-installer:java-8

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # $DOCKER_AUTH_CONFIG should have been setup as projet variable
  SCOPE: s3tbx
  REPORT_DIR: "${CI_PROJECT_DIR}/result"
  TEST_DATA_DIR: "${CI_PROJECT_DIR}/testData"
  MAVEN_CLI_OPTS: >-
    --no-transfer-progress
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=false
    -DdeployAtEnd=false
  S3_ARGS: --endpoint-url $S3_ENDPOINT --region sbg --no-progress

cache:
  - key: ${CI_CI_COMMIT_BRANCH}
    paths:
      - "${CI_PROJECT_DIR}/.m2/repository"
      - ".cache/pip"
      - "${CI_PROJECT_DIR}/**/target"
  - key: testData-$SCOPE
    paths:
      - "${TEST_DATA_DIR}/$SCOPE"
      # Special cache for s2tbx because "${TEST_DATA_DIR}/$SCOPE" is too large
      - "${TEST_DATA_DIR}/$SCOPE/_deimos"
      - "${TEST_DATA_DIR}/$SCOPE/_FCC_gpt"
      - "${TEST_DATA_DIR}/$SCOPE/_gpt_readers"
      - "${TEST_DATA_DIR}/$SCOPE/S2"

stages:
  - prepare
  - test

.prepare:
  before_script:
    # build project
    - mvn $MAVEN_CLI_OPTS package install
    # Clean old report
    - rm -rf $REPORT_DIR
    - mkdir -p $TEST_DATA_DIR/$SCOPE $REPORT_DIR $REPORT_DIR/report $REPORT_DIR/report/output
    - pip3 install -r $CI_PROJECT_DIR/requirements.txt
    - pip3 install awscli
    # Produce a list of tests to run
    - python3 $CI_PROJECT_DIR/pygpt/filter_json.py gpt-tests-resources/tests $SCOPE $REPORT_DIR
    - cat $REPORT_DIR/testData.txt
    # Download test data
    - |
      for line in $(cat $REPORT_DIR/testData.txt)
      do
        if [ ! -a "$TEST_DATA_DIR/$line" ] && [ ! -d "$TEST_DATA_DIR/$line" ]; then
          if [[ "$line" =~ (.xml|.XML|.JP2|.zip|.ZIP|.tgz|.NTF|.dim|.DIMA|.h5|.txt|.tif|_OC)$ ]]; then
            echo "Download file $line"
            ~/.local/bin/aws s3 cp "s3://$S3_BUCKET/testData/$line" "$TEST_DATA_DIR/$line" $S3_ARGS
          else
            echo "Download directory $line"
            ~/.local/bin/aws s3 cp "s3://$S3_BUCKET/testData/$line" "$TEST_DATA_DIR/$line" $S3_ARGS --recursive
          fi
        else
          echo "$line exists: skip download"
        fi
      done

prepare:
  stage: prepare
  tags:
    - kube
  image: docker-hosted.snap-ci.ovh/snap/snap-installer:latest
  extends: .prepare
  script:
    - ls -a $TEST_DATA_DIR/$SCOPE
  artifacts:
    untracked: false
    when: always
    expire_in: "10 hours"
    paths:
      - "${REPORT_DIR}"

test_s3tbx:
  rules:
    - if: $SCOPE == 's3tbx'
      when: always
    - when: never
  parallel: 22
  script: python3 pygpt/snap_gpt_test.py JAVA_BIN_PATH 'JAVA_OPTIONS -cp gpt-test-executer/target/TestOutput.jar' org.esa.snap.test.TestOutput $PROPERTIES_PATH $SCOPE $(sed "${CI_NODE_INDEX}q;d" $REPORT_DIR/JSONTestFiles.txt) $REPORT_DIR
  after_script:
    # Copy assets for report generation
    - cp -R $REPORT_DIR/report/output/* pygpt/statics/* $REPORT_DIR/report
    - echo "Generate report"
    - python3 pygpt/report_utils.py pygpt/templates $REPORT_DIR/report $SCOPE snap:master
    - echo "Clean up"
    - rm -rf $REPORT_DIR/report/output
  needs:
    - "prepare"
  artifacts:
    untracked: false
    when: always
    expire_in: "10 days"
    paths:
      - "${REPORT_DIR}/report"

test_s2tbx:
  rules:
    - if: $SCOPE == 's2tbx'
      when: always
    - when: never
  parallel: 100
  script: python3 pygpt/snap_gpt_test.py JAVA_BIN_PATH 'JAVA_OPTIONS -cp gpt-test-executer/target/TestOutput.jar' org.esa.snap.test.TestOutput $PROPERTIES_PATH $SCOPE (sed "${CI_NODE_INDEX}q;d" $REPORT_DIR/JSONTestFiles.txt) $REPORT_DIR
  after_script:
    # Copy assets for report generation
    - cp -R $REPORT_DIR/report/output/* pygpt/statics/* $REPORT_DIR/report
    - echo "Generate report"
    - python3 pygpt/report_utils.py pygpt/templates $REPORT_DIR/report $SCOPE snap:master
    - echo "Clean up"
    - rm -rf $REPORT_DIR/report/output
  needs:
    - "prepare"
  artifacts:
    untracked: false
    when: always
    expire_in: "10 days"
    paths:
      - "${REPORT_DIR}/report"

test_s1tbx:
  rules:
    - if: $SCOPE == 's1tbx'
      when: always
    - when: never
  parallel: 34
  script: python3 pygpt/snap_gpt_test.py JAVA_BIN_PATH 'JAVA_OPTIONS -cp gpt-test-executer/target/TestOutput.jar' org.esa.snap.test.TestOutput $PROPERTIES_PATH $SCOPE $(sed "${CI_NODE_INDEX}q;d" $REPORT_DIR/JSONTestFiles.txt) $REPORT_DIR
  after_script:
    # Copy assets for report generation
    - cp -R $REPORT_DIR/report/output/* pygpt/statics/* $REPORT_DIR/report
    - echo "Generate report"
    - python3 pygpt/report_utils.py pygpt/templates $REPORT_DIR/report $SCOPE snap:master
    - echo "Clean up"
    - rm -rf $REPORT_DIR/report/output
  needs:
    - "prepare"
  artifacts:
    untracked: false
    when: always
    expire_in: "10 days"
    paths:
      - "${REPORT_DIR}/report"

test_windows:
  tags:
    - windows
  image: docker-hosted.snap-ci.ovh/snap/snap-installer:win-latest
  variables:
    SCOPE: daily
    SNAP_DIR: /c/users/snap
    TAG: master
    PROPERTIES_PATH: $CI_PROJECT_DIR/snap.conf
  extends: .prepare
  script:
    - ${CI_PROJECT_DIR}/run_tests.sh $SNAP_DIR $SCOPE $REPORT_DIR $TAG

test_mac:
  image: macos-12-xcode-14
  variables:
    SCOPE: daily
    SNAP_DIR: /opt/snap
    TAG: master
    PROPERTIES_PATH: $CI_PROJECT_DIR/snap.conf
  extends: .prepare
  script:
    - ${CI_PROJECT_DIR}/run_tests.sh $SNAP_DIR $SCOPE $REPORT_DIR $TAG

# test:
#   stage: test
#   tags:
#     - build
#   variables:
#     SNAP_DIR: /opt/snap
#     TAG: master
#     PROPERTIES_PATH: $CI_PROJECT_DIR/snap.conf
#     # TEST_FILE: s1tbx.coregister-coherence.json
#   script:
#     - ls -a $TEST_DATA_DIR/$SCOPE
#     # Run GPT Tests list
#     - ${CI_PROJECT_DIR}/run_tests.sh $SNAP_DIR $SCOPE $REPORT_DIR $TAG
#     # Run a single test
#     # - python3 pygpt/snap_gpt_test.py $JAVA_HOME/bin/ '${JAVA_OPTIONS} -cp gpt-test-executer/target/TestOutput.jar' \
#     #   org.esa.snap.test.TestOutput $PROPERTIES_PATH $SCOPE $TEST_FILE $REPORT_DIR false
#   after_script:
#     # Copy assets for report generation
#     - cp -R $REPORT_DIR/report/output/* pygpt/statics/* $REPORT_DIR/report
#     - echo "Generate report"
#     - python3 pygpt/report_utils.py pygpt/templates $REPORT_DIR/report $SCOPE snap:master
#     - echo "Clean up"
#     - rm -rf $REPORT_DIR/report/output
#   needs:
#     - "prepare"
#   artifacts:
#     untracked: false
#     when: always
#     expire_in: "10 days"
#     paths:
#       - "${REPORT_DIR}/report"