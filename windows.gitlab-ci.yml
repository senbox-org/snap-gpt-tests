install_snap:
  tags:
    - windows
  stage: test
  cache: []
  variables:
    SCOPE: daily
    REPORT_DIR: result
    TEST_DATA_DIR: 'D:\\testData'
    DL_DIR: 'C:\Users\Public\Documents'
    SNAP_DIR: 'C:\\Users\\Public\\Documents\\snap'
    TEMP_DIR: 'D:\\tmp'
    TAG: master
    PROPERTIES_PATH: win.conf
    SNAP_INSTALLER_EXE: "snap_all_windows-%VERSION%.exe"
    NEXUS_URL: "https://nexus.snap-ci.ovh/repository/snap-maven-releases/org/esa/snap/installers-snapshot/snap_all_windows/%VERSION%"
    TEST_DATA_LIST: singleTestData.txt
    JAVA_HOME: C:\\Program Files\\Zulu\\zulu-11
    JAVA_OPTIONS: >-
      -Dncsa.hdf.hdflib.HDFLibrary.hdflib=%SNAP_DIR%\\snap\\modules\\lib\\amd64\\jhdf.dll
      -Dncsa.hdf.hdf5lib.H5.hdf5lib=%SNAP_DIR%\\snap\modules\\lib\amd64\\jhdf5.dll
      -Dfile.encoding=Windows-1252
    CLASSPATH: gpt-tests-executer\\target\\gpt-test-exec.jar
    # output upload and download progress every 2 seconds
    TRANSFER_METER_FREQUENCY: "2s"
    # Use fast compression for artifacts, resulting in larger archives
    ARTIFACT_COMPRESSION_LEVEL: "slowest" 
  script:
    - echo username = %USERNAME%
    # build maven project
    ###- call mvn %MAVEN_CLI_OPTS% package install
    # print local variables
    - echo CI_PROJECT_DIR       = %CI_PROJECT_DIR%
    - echo DL_DIR               = %DL_DIR%
    - echo NEXUS_URL            = %NEXUS_URL%
    - echo REPORT_DIR           = %REPORT_DIR%
    - echo SCOPE                = %SCOPE%
    - echo SNAP_DIR             = %SNAP_DIR%
    - echo SNAP_INSTALLER_EXE   = %SNAP_INSTALLER_EXE%
    - echo VERSION              = %VERSION%
    - echo S3_REPORTS           = %S3_REPORTS%
    # Clean old report
    ###- rd /s /q %CI_PROJECT_DIR%\%REPORT_DIR%
    ###- mkdir %REPORT_DIR% && mkdir %REPORT_DIR%\report && mkdir %REPORT_DIR%\report\output
    ###- python -m venv snapenv && call .\snapenv\Scripts\activate.bat && pip3 install -r %CI_PROJECT_DIR%\requirements.txt
    # Produce a list of tests to run
    ###- python %CI_PROJECT_DIR%\pygpt\filter_json.py gpt-tests-resources\tests %SCOPE% %REPORT_DIR%
    # remove old SNAP installer file
    - DEL /Q /F /S %DL_DIR%\%SNAP_INSTALLER_EXE%
    # Download SNAP application from Nexus 
    - curl --progress-bar "%NEXUS_URL%/%SNAP_INSTALLER_EXE%" >> "%DL_DIR%\%SNAP_INSTALLER_EXE%"
    # Check MD5 checksums of SNAP installer executable files.
    - CALL checkMD5.bat
    - echo "return from checkMD5.bat with code %md5RetVal%"
    - echo "MD5_RETVAL=%md5RetVal%" >> md5.env
    - |
      IF !md5RetVal! EQU 0 (
        REM Install SNAP aplication on destination Windows VM
        REM echo "Install SNAP (version %VERSION%)" && "%DL_DIR%\%SNAP_INSTALLER_EXE%" -q -dir "%SNAP_DIR%" -console -overwrite -v
        REM echo "Post install" && xcopy "%DL_DIR%\snap.properties" "%SNAP_DIR%\etc" /Y
      ) ELSE (
        echo "ERROR - Do not execute installation of SNAP (version %VERSION%) - the installer file is corrupt."
        echo "Exit from job..."
        exit 3
      )
 artifacts:
  reports:
    dotenv: md5.env
    expire_in: "5 mins"     
    

test_windows:
  tags:
    - windows
  stage: test
  cache: []
  variables:
    REPORT_DIR: result
  before_script: []    
  script:
    - |
      IF !MD5_RETVAL! EQU 0 (
        CALL run_tests.bat
      ) ELSE (
        echo "ERROR - Do not run tests - the installer file is corrupt."
        echo "Exit from job..."
        exit 3
      )
  after_script:
    # Remove heavy images
    - DEL /Q /F /S %REPORT_DIR%\report\output\*.zip
    - DEL /Q /F /S %REPORT_DIR%\report\output\*.dim
    - DEL /Q /F /S %TEMP%\*
  artifacts:
    when: always
    expire_in: "1 hour"
    paths:
      - result
  needs:
    - job: install_snap
      artifacts: true


report:
  tags:
    - windows
  stage: report  
  cache: []
  rules:
    - if: $PLATFORM == 'windows' && $SCOPE != 'CItest'
      when: always
    - when: never
  variables:
    REPORT_DIR: result
    # output upload and download progress every 2 seconds
    TRANSFER_METER_FREQUENCY: "2s"
    # Use fast compression for artifacts, resulting in larger archives
    ARTIFACT_COMPRESSION_LEVEL: "fast"
    # Use no compression for caches
    CACHE_COMPRESSION_LEVEL: "fastest"
    # Set maximum duration of cache upload and download
    CACHE_REQUEST_TIMEOUT: 5
    DEST_DIR: public\windows
  script:
    - echo "Copy assets for report generation"
    - mkdir %CI_PROJECT_DIR%\%REPORT_DIR%\report\json %CI_PROJECT_DIR%\%REPORT_DIR%\report\performances %CI_PROJECT_DIR%\%REPORT_DIR%\report\images
    - xcopy /Y "%CI_PROJECT_DIR%\%REPORT_DIR%\report\output\json\*.json" "%CI_PROJECT_DIR%\%REPORT_DIR%\report\json\"
    - xcopy /E /H /C /I "%CI_PROJECT_DIR%\%REPORT_DIR%\report\output\performances" "%CI_PROJECT_DIR%\%REPORT_DIR%\report\performances\" 
    - xcopy /Y "%CI_PROJECT_DIR%\%REPORT_DIR%\report\output\*.txt" "%CI_PROJECT_DIR%\%REPORT_DIR%\report\"
    - rmdir /Y /S "%CI_PROJECT_DIR%\%REPORT_DIR%\report\output"
    - mkdir %CI_PROJECT_DIR%\result\report\css %CI_PROJECT_DIR%\result\report\icons %CI_PROJECT_DIR%\result\report\js
    - xcopy /Y "%CI_PROJECT_DIR%\pygpt\statics\css\*.css*" "%CI_PROJECT_DIR%\result\report\css\"
    - xcopy /Y "%CI_PROJECT_DIR%\pygpt\statics\icons\*.jpg" "%CI_PROJECT_DIR%\result\report\icons\"
    - xcopy /Y "%CI_PROJECT_DIR%\pygpt\statics\icons\*.png" "%CI_PROJECT_DIR%\result\report\icons\"
    - xcopy /Y "%CI_PROJECT_DIR%\pygpt\statics\js\*.js" "%CI_PROJECT_DIR%\result\report\js\"
    - echo "Generate report"
    - python pygpt\report_utils.py pygpt\templates %CI_PROJECT_DIR%\%REPORT_DIR%\report %SCOPE% snap:master
    - rd /s /q %CI_PROJECT_DIR%\%DEST_DIR%
    - mkdir %CI_PROJECT_DIR%\public %CI_PROJECT_DIR%\%DEST_DIR%
    # Upload report to s3
    - '"C:\Program Files\Amazon\AWSCLIV2\aws.exe" s3 rm "s3://%S3_REPORTS%/windows" --recursive --endpoint-url https://s3.sbg.io.cloud.ovh.net --region sbg"'
    - '"C:\Program Files\Amazon\AWSCLIV2\aws.exe" s3 sync %CI_PROJECT_DIR%\%REPORT_DIR%\report "s3://%S3_REPORTS%/windows" --endpoint-url https://s3.sbg.io.cloud.ovh.net --region sbg --acl public-read'
  after_script:
    - '%CI_PROJECT_DIR%\update_database.bat'
  artifacts:
    expire_in: 1 day
    paths:
      - '%CI_PROJECT_DIR%\%REPORT_DIR%\report'
  needs:
    - job: install_snap
      artifacts: true
